/* ----------------
	 DEPENDENCIES
----------------- */
const
	express = require('express'),
	router  = require('./routes'),
	{auth}  = require('express-openid-connect'),
	_path   = require('path'),
	https 	= require('https'),
	jwt     = require('express-jwt'),
	fs 			= require('fs'),
	app     = express(),
	engine  = require('ejs-locals');


/* ----------------
	 CONFIGURATION
----------------- */
const
	audience       = 'https://mascustest.mascus.com/',
	issuer         = 'https://dev-id.ritchiebros.com/',
	issuerBaseURL  = 'https://dev-id.ritchiebros.com/',
	baseURL        = 'https://localhost:3000',
	clientID       = 'NtLGXEBkuMzejJxHXVaUNCkNVxuLAaBO',
	secret         = 'fuRSxZlyN1m9aVZ6U7W5QaMJj8ul_JqPFGOpFmh-H9Lfj0l2B32G0109Zo_X3iDj',
	jwtCheckConfig = jwt({secret, audience, issuer, algorithms: ['RS256']}).unless({path: ['/']}),// Middleware used to authenticate the access tokens generated by Auth0 and sent in the Authorization header of each request
	authConfig     = {baseURL, clientID, secret, issuerBaseURL, idpLogout: true,authRequired: false, auth0Logout: true};// Middleware used to retrieve user data and handle the Auth0 authentication flows


/* ----------------
	MIDDLEWARE
	----------------- */
app.use(auth(authConfig))
	.use(jwtCheckConfig)
	.use(function (req, res, next) { res.locals.user = req.oidc.user; next(); })
	.use('/', router)
	.use(function (err, req, res, next) { res.status(err.status).render('error', { status: err.status, message: err.message, error: err }); });


/* ----------------
	 SETUP
----------------- */
const port = process.env.PORT || 3000;
const successLog = () => { console.log('Application running on port ' + port) };


app.use(express.json())
	.set('view engine', 'ejs')
	.engine('ejs', engine)
	.set('views', _path.join(__dirname, 'views'))
	.use(express.static(_path.join(__dirname, 'public')))
	.listen(port, successLog);

// For local setup
// const key = fs.readFileSync('certs/server.key', 'utf8');
// const cert = fs.readFileSync('certs/server.crt', 'utf8');
// https.createServer({ key, cert }, app)
// 	.listen(port, successLog);
